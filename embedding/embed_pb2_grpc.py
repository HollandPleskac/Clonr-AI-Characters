# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import embed_pb2 as embed__pb2


class EmbedStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncodeQueries = channel.unary_unary(
                '/Embed/EncodeQueries',
                request_serializer=embed__pb2.EncodeQueryRequest.SerializeToString,
                response_deserializer=embed__pb2.EmbeddingResponse.FromString,
                )
        self.EncodePassages = channel.unary_unary(
                '/Embed/EncodePassages',
                request_serializer=embed__pb2.EncodePassageRequest.SerializeToString,
                response_deserializer=embed__pb2.EmbeddingResponse.FromString,
                )
        self.GetRankingScores = channel.unary_unary(
                '/Embed/GetRankingScores',
                request_serializer=embed__pb2.RankingScoreRequest.SerializeToString,
                response_deserializer=embed__pb2.RankingScoreResponse.FromString,
                )


class EmbedServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EncodeQueries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodePassages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRankingScores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbedServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncodeQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeQueries,
                    request_deserializer=embed__pb2.EncodeQueryRequest.FromString,
                    response_serializer=embed__pb2.EmbeddingResponse.SerializeToString,
            ),
            'EncodePassages': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodePassages,
                    request_deserializer=embed__pb2.EncodePassageRequest.FromString,
                    response_serializer=embed__pb2.EmbeddingResponse.SerializeToString,
            ),
            'GetRankingScores': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRankingScores,
                    request_deserializer=embed__pb2.RankingScoreRequest.FromString,
                    response_serializer=embed__pb2.RankingScoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Embed', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Embed(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EncodeQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Embed/EncodeQueries',
            embed__pb2.EncodeQueryRequest.SerializeToString,
            embed__pb2.EmbeddingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncodePassages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Embed/EncodePassages',
            embed__pb2.EncodePassageRequest.SerializeToString,
            embed__pb2.EmbeddingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRankingScores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Embed/GetRankingScores',
            embed__pb2.RankingScoreRequest.SerializeToString,
            embed__pb2.RankingScoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
