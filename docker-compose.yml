version: '3.8'

services:
  postgres:
    build:
      context: ./db
    restart: always
    env_file:
      - .env
    volumes:
      - ./volume/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U postgres
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7.0.11-alpine
    restart: always
    env_file:
      - .env
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./volume/redis:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', '--raw', 'incr', 'ping' ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s

  embedding:
    build: './embedding'
    env_file:
      - .env
    volumes:
      - ./embedding/app:/app
      - ./artifacts:/artifacts
    ports:
      - 50051:50051

  backend:
    build: './backend'
    env_file:
      - .env
    volumes:
      - ./backend/app:/app
      - ./backend/clonr:/clonr
      - ./backend/migrations:/migrations
      - ./backend/tests:/tests
    depends_on:
      - postgres
      - redis
      - embedding
    ports:
      - 8000:8000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://backend:8000/health" ]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    depends_on:
      - backend
    #     condition: service_healthy
    ports:
      - 3000:3000

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411

  loki:
    image: grafana/loki:2.8.3
    command: -config.file=/etc/loki/local-config.yaml
    # volumes:
    #   - ./telemetry/loki/loki-config.yaml:/etc/loki/local-config.yaml
    ports:
      - 3100:3100

  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    command: -config.file=/mnt/config/promtail-config.yaml
    volumes:
      - ./telemetry/promtail/promtail-config.yaml:/mnt/config/promtail-config.yaml
      - ./telemetry/promtail/log:/var/log
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./telemetry/prometheus/prometheus.yml:/workspace/prometheus.yml
    ports:
      - 9090:9090
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage

  # Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.83.0
    restart: always
    command:
      [
        "--config=/etc/otel-collector-config.yaml",
        "${OTELCOL_ARGS}"
      ]
    volumes:
      - ./telemetry/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
      - prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3001:3000 # 1st value is container port, 2nd value is localhost port. This conflicts with frontend otherwise
    # NOTE (Jonny): this doesn't work for some reason, the app always says you're unauthorized
    # environment:
    #   - GF_AUTH_ANONYMOUS_ENABLED=true
    #   - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    #   - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./telemetry/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./telemetry/grafana/dashboards:/etc/grafana/dashboards
      - ./telemetry/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - otel-collector
