version: '3.8'

services:
  postgres:
    build:
      context: ./db
    restart: always
    env_file:
      - .env
    volumes:
      - ./volume/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U postgres
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7.0.11-alpine
    restart: always
    env_file:
      - .env
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./volume/redis:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', '--raw', 'incr', 'ping' ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s

  embedding:
    build: './embedding'
    env_file:
      - .env
    volumes:
      - ./embedding/app:/app
      - ./artifacts:/artifacts
    ports:
      - 50051:50051

  backend:
    build: './backend'
    env_file:
      - .env
    environment:
      - port=8000
    volumes:
      - ./backend/app:/app
      - ./backend/clonr:/clonr
      - ./backend/migrations:/migrations
      - ./backend/tests:/tests
    depends_on:
      - postgres
      - redis
      - embedding
    ports:
      - 8000:8000

  frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    depends_on:
      - backend
    ports:
      - 3000:3000
    # Set environment variables directly in the docker-compose file
    # environment:
    #   ENV_VARIABLE: ${ENV_VARIABLE}
    #   NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}

    # Set envrionment variables based on the .env file
    # env_file:
    #   - .env