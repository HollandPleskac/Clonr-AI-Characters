name: Python application

env:
  ACTIONS_RUNNER_DEBUG: true

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry==1.5.1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv venv  
        source venv/bin/activate 
        cd ./backend
        poetry export -f requirements.txt --output requirements.txt --without-hashes --dev
        pip install -r requirements.txt
    - name: Cache pip dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-
    - name: Lint with flake8
      run: |
        source venv/bin/activate 
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Formatting with black
      run: |
        source venv/bin/activate 
        black ./backend --check --verbose
    - name: Type checking with mypy
      run: |
        source venv/bin/activate 
        cd ./backend
        mypy . --ignore-missing-imports --exclude ./clonr/ --exclude ./tests/ --exclude ./integration_tests/ --exclude ./app/embedding/
      continue-on-error: true
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
    - name: Start docker compose
      run: docker-compose up -d
    - name: Run tests w/ docker compose
      run: |
        source venv/bin/activate
        cd ./backend
        chmod +x run_tests.sh
        ./run_tests.sh
    - name: Stop docker compose
      run: docker-compose down
    # - name: Run tests
    #   run: |
    #     source venv/bin/activate 
    #     cd ./backend
    #     python -m pytest
      
