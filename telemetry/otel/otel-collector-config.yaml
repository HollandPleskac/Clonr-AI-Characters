# This is based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/demo/otel-collector-config.yaml
# and also https://github.com/uptrace/uptrace/blob/master/example/docker/otel-collector.yaml
# the former is a minimal working version, the latter uses the otel contrib docker conatiner to get additional receivers or some shit
# namely, the resourcedetection processor and the postgresql receiver

# Overall, this is how this thing works. This is an OTEL config (note the EL not LP), which stands for
# OpenTelemetry Collector. Essentially, this collects a continuous stream of data, and aggregates/collects it in some way
# Receivers are data sources (so here otlp is the actual otlp throughout our code, which sends data via gRPC to 4317),
# hostmetrics is a contrib receiver that monitors the underlying hardware, and postgresql is also another receiver like that
receivers:
  otlp:
    protocols:
      grpc:

  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      paging:

  postgresql:
    endpoint: postgres:5432
    transport: tcp
    username: postgres
    password: postgres
    databases:
      - postgres
    tls:
      insecure: true

processors:
  resourcedetection:
    detectors: ["system"]
  batch:
    send_batch_size: 10000
    timeout: 10s
  resource:
    attributes:
      - action: insert
        key: loki.format
        value: logfmt

exporters:
  logging:
    verbosity: normal
    sampling_initial: 5
    sampling_thereafter: 200

  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      label1: value1

  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    default_labels_enabled:
      exporter: false
      job: true

  # zipkin:
  #   endpoint: "http://zipkin:9411/api/v2/spans"
  #   format: proto

extensions:
  health_check:
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [jaeger]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]
    metrics/hostmetrics:
      receivers: [hostmetrics]
      processors: [batch, resourcedetection]
      exporters: [prometheus]
    logs:
      receivers: [otlp]
      processors: [resource]
      exporters: [loki]
